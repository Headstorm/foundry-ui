// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Label should have asterisk icon if isRequired is true 1`] = `
{
  "asFragment": [Function],
  "baseElement": .c0 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  color: #9FA2A5;
  margin-bottom: .25em;
  font-size: .75em;
}

.c1 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin-left: 0.25em;
}

<body>
    <div>
      <div
        class=" "
      >
        <div
          class=" "
        >
          <label
            class=" c0"
            color="#9FA2A5"
            for="default"
            id="label"
          >
            Test text
          </label>
          <span
            aria-hidden="true"
            class=" c1"
          >
            <svg
              role="presentation"
              style="width: .75em; height: .75em;"
              viewBox="0 0 24 24"
            >
              <path
                d="M10,2H14L13.21,9.91L19.66,5.27L21.66,8.73L14.42,12L21.66,15.27L19.66,18.73L13.21,14.09L14,22H10L10.79,14.09L4.34,18.73L2.34,15.27L9.58,12L2.34,8.73L4.34,5.27L10.79,9.91L10,2Z"
                style="fill: #9FA2A5;"
              />
            </svg>
          </span>
        </div>
      </div>
    </div>
  </body>,
  "container": .c0 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  color: #9FA2A5;
  margin-bottom: .25em;
  font-size: .75em;
}

.c1 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin-left: 0.25em;
}

<div>
    <div
      class=" "
    >
      <div
        class=" "
      >
        <label
          class=" c0"
          color="#9FA2A5"
          for="default"
          id="label"
        >
          Test text
        </label>
        <span
          aria-hidden="true"
          class=" c1"
        >
          <svg
            role="presentation"
            style="width: .75em; height: .75em;"
            viewBox="0 0 24 24"
          >
            <path
              d="M10,2H14L13.21,9.91L19.66,5.27L21.66,8.73L14.42,12L21.66,15.27L19.66,18.73L13.21,14.09L14,22H10L10.79,14.09L4.34,18.73L2.34,15.27L9.58,12L2.34,8.73L4.34,5.27L10.79,9.91L10,2Z"
              style="fill: #9FA2A5;"
            />
          </svg>
        </span>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Label should have default color text if not given a isValid 1`] = `
{
  "asFragment": [Function],
  "baseElement": .c0 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  color: #FF4500;
  margin-bottom: .25em;
  font-size: .75em;
}

.c1 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin-left: 0.25em;
}

<body>
    <div>
      <div
        class=" "
      >
        <div
          class=" "
        >
          <label
            class=" c0"
            color="#FF4500"
            for="default"
            id="label"
          >
            Test text
          </label>
          <span
            aria-hidden="true"
            class=" c1"
          >
            <svg
              role="presentation"
              style="width: .75em; height: .75em;"
              viewBox="0 0 24 24"
            >
              <path
                d=""
                style="fill: #FF4500;"
              />
            </svg>
          </span>
        </div>
      </div>
    </div>
  </body>,
  "container": .c0 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  color: #FF4500;
  margin-bottom: .25em;
  font-size: .75em;
}

.c1 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin-left: 0.25em;
}

<div>
    <div
      class=" "
    >
      <div
        class=" "
      >
        <label
          class=" c0"
          color="#FF4500"
          for="default"
          id="label"
        >
          Test text
        </label>
        <span
          aria-hidden="true"
          class=" c1"
        >
          <svg
            role="presentation"
            style="width: .75em; height: .75em;"
            viewBox="0 0 24 24"
          >
            <path
              d=""
              style="fill: #FF4500;"
            />
          </svg>
        </span>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Label should have text be colorInvalid if given a isValid prop of false 1`] = `
.c0 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  color: #9400D3;
  margin-bottom: .25em;
  font-size: .75em;
}

.c1 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin-left: 0.25em;
}

<div>
  <div
    class=" "
  >
    <div
      class=" "
    >
      <label
        class=" c0"
        color="#9400D3"
        for="default"
        id="label"
      >
        Test text
      </label>
      <span
        aria-hidden="true"
        class=" c1"
      >
        <svg
          role="presentation"
          style="width: .75em; height: .75em;"
          viewBox="0 0 24 24"
        >
          <path
            d="M10,2H14L13.21,9.91L19.66,5.27L21.66,8.73L14.42,12L21.66,15.27L19.66,18.73L13.21,14.09L14,22H10L10.79,14.09L4.34,18.73L2.34,15.27L9.58,12L2.34,8.73L4.34,5.27L10.79,9.91L10,2Z"
            style="fill: #9400D3;"
          />
        </svg>
      </span>
    </div>
  </div>
</div>
`;

exports[`Label should have text be colorValid and a check icon if given a isValid prop of true 1`] = `
.c0 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  color: #0000FF;
  margin-bottom: .25em;
  font-size: .75em;
}

.c1 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin-left: 0.25em;
}

<div>
  <div
    class=" "
  >
    <div
      class=" "
    >
      <label
        class=" c0"
        color="#0000FF"
        for="default"
        id="label"
      >
        Test text
      </label>
      <span
        aria-hidden="true"
        class=" c1"
      >
        <svg
          role="presentation"
          style="width: .75em; height: .75em;"
          viewBox="0 0 24 24"
        >
          <path
            d="M9,20.42L2.79,14.21L5.62,11.38L9,14.77L18.88,4.88L21.71,7.71L9,20.42Z"
            style="fill: #0000FF;"
          />
        </svg>
      </span>
    </div>
  </div>
</div>
`;
